syntax = "proto3";
package garyeong.garyeong;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "garyeong/params.proto";
import "garyeong/models.proto";
// this line is used by starport scaffolding # 1

option go_package = "garyeong/x/garyeong/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/garyeong/garyeong/params";
  }
  // Queries a list of GetAllReports items.
	rpc GetAllReports(QueryGetAllReportsRequest) returns (QueryGetAllReportsResponse) {
		option (google.api.http).get = "/garyeong/garyeong/get_all_reports";
	}

// Queries a list of GetCommentsByReportId items.
	rpc GetCommentsByReportId(QueryGetCommentsByReportIdRequest) returns (QueryGetCommentsByReportIdResponse) {
		option (google.api.http).get = "/garyeong/garyeong/get_comments_by_report_id/{reportId}";
	}

// Queries a list of GetCommentById items.
	rpc GetCommentById(QueryGetCommentByIdRequest) returns (QueryGetCommentByIdResponse) {
		option (google.api.http).get = "/garyeong/garyeong/get_comment_by_id/{id}";
	}

// Queries a list of GetReportsCount items.
	rpc GetReportsCount(QueryGetReportsCountRequest) returns (QueryGetReportsCountResponse) {
		option (google.api.http).get = "/garyeong/garyeong/get_reports_count";
	}

// Queries a list of GetReportById items.
	rpc GetReportById(QueryGetReportByIdRequest) returns (QueryGetReportByIdResponse) {
		option (google.api.http).get = "/garyeong/garyeong/get_report_by_id/{id}";
	}

// Queries a list of GetReportByTarget items.
	rpc GetReportByTarget(QueryGetReportByTargetRequest) returns (QueryGetReportByTargetResponse) {
		option (google.api.http).get = "/garyeong/garyeong/get_report_by_target/{target}";
	}

// Queries a list of GetReportsByTags items.
	rpc GetReportsByTags(QueryGetReportsByTagsRequest) returns (QueryGetReportsByTagsResponse) {
		option (google.api.http).get = "/garyeong/garyeong/get_reports_by_tags/{tags}";
	}

// Queries a list of GetProfiles items.
	rpc GetProfiles(QueryGetProfilesRequest) returns (QueryGetProfilesResponse) {
		option (google.api.http).get = "/garyeong/garyeong/get_profiles";
	}

// Queries a list of GetProfilesCount items.
	rpc GetProfilesCount(QueryGetProfilesCountRequest) returns (QueryGetProfilesCountResponse) {
		option (google.api.http).get = "/garyeong/garyeong/get_profiles_count";
	}

// Queries a list of GetProfileById items.
	rpc GetProfileById(QueryGetProfileByIdRequest) returns (QueryGetProfileByIdResponse) {
		option (google.api.http).get = "/garyeong/garyeong/get_profile_by_id/{id}";
	}

// Queries a list of GetProfileByAddress items.
	rpc GetProfileByAddress(QueryGetProfileByAddressRequest) returns (QueryGetProfileByAddressResponse) {
		option (google.api.http).get = "/garyeong/garyeong/get_profile_by_address/{address}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetAllReportsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryGetAllReportsResponse {
  repeated Report reports = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetCommentsByReportIdRequest {
  uint64 reportId = 1;
cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryGetCommentsByReportIdResponse {
  repeated Comment comments = 1;
cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetCommentByIdRequest {
  uint64 id = 1;
}

message QueryGetCommentByIdResponse {
  Comment comment = 1;
}

message QueryGetReportsCountRequest {
}

message QueryGetReportsCountResponse {
  uint64 count = 1;
}

message QueryGetReportByIdRequest {
  uint64 id = 1;
}

message QueryGetReportByIdResponse {
  Report report = 1;
}

message QueryGetReportByTargetRequest {
  string target = 1;
}

message QueryGetReportByTargetResponse {
  repeated Report report = 1;
}

message QueryGetReportsByTagsRequest {
  repeated string tags = 1;
}

message QueryGetReportsByTagsResponse {
  repeated Report report = 1;
}

message QueryGetProfilesRequest {
cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryGetProfilesResponse {
  repeated Profile profiles = 1;
cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetProfilesCountRequest {
}

message QueryGetProfilesCountResponse {
  uint64 count = 1;
}

message QueryGetProfileByIdRequest {
  uint64 id = 1;
}

message QueryGetProfileByIdResponse {
  Profile profile = 1;
}

message QueryGetProfileByAddressRequest {
  string address = 1;
}

message QueryGetProfileByAddressResponse {
  Profile profile = 1;
}

// this line is used by starport scaffolding # 3
